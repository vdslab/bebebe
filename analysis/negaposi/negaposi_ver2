from janome.tokenizer import Tokenizer

# 極性辞書の作成
dict_polarity = {}
with open('analysis/pn_ja.dic.txt', 'r', encoding='shift_jis') as f:
    line = f.read()
    lines = line.split('\n')
    for i in range(len(lines)):
        line_components = lines[i].split(':')
        dict_polarity[line_components[0]] = line_components[3]

 

# ネガポジ分析用の関数の作成
def judge_polarity(text):
    t = Tokenizer()
    tokens = t.tokenize(text)
    pol_val = 0
    pos_cnt = 0
    for token in tokens:
        word = token.surface
        pos = token.part_of_speech.split(',')[0]
        if word in dict_polarity:
            pol_val = pol_val + float(dict_polarity[word])
            pos_cnt += 1
            # 一つ一つの言葉の点数
            # print("言葉："+str(word)+" 点数："+str(float(dict_polarity[word])))

    # if pos_cnt != 0:
    #    pol_val /= pos_cnt
    # if pol_val > 0.3:
    #     print("Positive. Score："+str(pol_val))
    # elif pol_val < -0.3:
    #     print("Negative. Score："+str(pol_val))
    # else:
    #     print("Neutral. Score："+str(pol_val))
    return pol_val

 

# ネガポジ分析の実行

lyrics_list = []

import glob
for filepath in glob.glob('analysis/lyrics/*'):
    lyrics_list.append(filepath)

print(lyrics_list)



for i in range(len(lyrics_list)):
    f = open(lyrics_list[i], 'r', encoding='UTF-8')
    data = f.read()
    # print(data)
    print(f.name[16:]+" "+str(judge_polarity(data)))
    f.close()